//! This file defines the opcodes,

//! And some utility types and functions.
//! There is a lot of code gen going on here by means of the OpCode derive-macro.
//! I consider the macro part of this crate, even though it is technically a sub-crate.
//! Therefore I liberally use types in the code generation, because I know they exist, instead
//! of somehow getting them into the macro. For an independent macro crate, this would be a no-go
//! but in this private scenario, I think it's fine. The vm::* imports are here because of the
//! codegen, btw

use proc_macros::OpCode;

// this import is here to have the exec_... functions in scope
use crate::core::*;
use crate::vm::*;

/// Representing Opcodes, all variants must have zero or one member.
/// This way, it's possible to simply convert between an object and it's raw representation
/// Most impls are generated by the
/// [OpCode macro](proc_macros::OpCode)
#[derive(Debug, Clone, Copy, OpCode, PartialEq)]
pub enum OpCode {
    Exit(i32),
    PushDataSecRef(DataSecIdx),
    PushPrimitive(CopyValue),
    Exec,
    StrCat,
}

/// Represents an index into the data-section vec
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct DataSecIdx(pub usize);

/// In the Datasection the format is different than on the Stack, E.e. on the stack there will
/// be a String, but in the data section, there will be a &str. So we cant describe data section
/// types the same way we descrive types during compilation. Also DataSecTypes must be Copy
#[derive(Debug, Copy, Clone, PartialEq)]
pub enum DataSecType {
    StrRef,
}

impl OpCode {
    /// Patches DataRefs in OpCode args
    /// The OpCode macro could generate this too
    ///
    /// If you combine multiple chunks of opcodes, references to the data section will become
    /// invalid. This function allows updating the references
    pub fn offset_data_section_addr(&mut self, offset: usize) {
        use OpCode::*;
        match self {
            PushDataSecRef(DataSecIdx(r)) => *r += offset,
            Exit(_) | PushPrimitive(_) | Exec | StrCat => {}
        };
    }
}
